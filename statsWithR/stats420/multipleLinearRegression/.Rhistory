beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
beta.hat.no.lm
sum( beta.hat.no.lm ^ 2 )
mlr.ozone   <- lm( ozone ~ ., data = Ozone )
beta.hat.lm <- as.vector( summary(mlr.ozone)$coefficients[ , "Estimate"] )
beta.hat.lm
sum( beta.hat.lm ^ 2 )
all.equal( beta.hat.no.lm, beta.hat.lm )
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
C         <- solve( t(X) %*% X )
beta.se   <- diag( c( sqrt( sigma.sqr ) ) * sqrt( abs(C) ) )
SSreg          <- sum( ( y.hat - mean(y) ) ^ 2 )
SStotal        <- sum( ( y     - mean(y) ) ^ 2 )
r.square.no.lm <- ( SSreg / SStotal )
r.square.lm    <- summary(mlr.ozone)$r.square
all.equal( r.square.no.lm, r.square.lm )
library(ISLR)
Auto = subset(Auto, select = -c(name))
library(ISLR)
head(Auto)
set.seed(1)
auto_trn_idx <- sample(1:nrow(Auto), 292)
auto.trn     <- Auto[  auto_trn_idx, ]
auto.tst     <- Auto[ -auto_trn_idx, ]
auto.model.1 <- lm( mpg ~ ., data = auto.trn )
auto.model.2 <- lm( mpg ~ displacement, data = auto.trn )
auto.model.3 <- lm( mpg ~ horsepower + cylinders, data = auto.trn )
auto.model.4 <- lm( mpg ~ cylinders + displacement + weight, data = auto.trn )
auto.model.5 <- lm( mpg ~ weight + cylinders + year, data = auto.trn )
find.RMSE <- function( train, test, model )
{
# Find RMSE for first train model
y          <- train$mpg
y.hat      <- predict( model, train[2:8] )
RMSE.train <- sqrt( ( 1 / nrow(train) ) * sum( ( y - y.hat ) ^ 2 ) )
# Find RMSE for first test model
y         <- test$mpg
y.hat     <- predict( model, test[2:8] )
RMSE.test <- sqrt( ( 1 / nrow(test) ) * sum( ( y - y.hat ) ^ 2 ) )
return( c( RMSE.train, RMSE.test ) )
}
row1 <- find.RMSE( auto.trn, auto.tst, auto.model.1 )
row2 <- find.RMSE( auto.trn, auto.tst, auto.model.2 )
row3 <- find.RMSE( auto.trn, auto.tst, auto.model.3 )
row4 <- find.RMSE( auto.trn, auto.tst, auto.model.4 )
row5 <- find.RMSE( auto.trn, auto.tst, auto.model.5 )
RMSE.data <- as.data.frame( rbind( row1, row2, row3, row4, row5 ) )
rownames(RMSE.data) <- c( 'Model 1', 'Model 2', 'Model 3', 'Model 4', 'Model 5' )
library(knitr)
kable( RMSE.data, digits = 6, align = 'r',
col.names = c( 'Train RMSE', 'Test RMSE' ) )
set.seed(420)
n         <- 42
beta.0    <- 2
beta.1    <- -.75
beta.2    <- 1.5
beta.3    <- 0
beta.4    <- 0
beta.5    <- 2
sigma.sqr <- 25
sigma     <- 5
x0 <- rep( 1, length = n )
x1 <- rnorm( length(x0), mean = 0, sd = 2 )
x2 <- runif( length(x0), min = 0, max = 4 )
x3 <- rnorm( length(x0), mean = 0, sd = 1 )
x4 <- runif( length(x0), min = -2, max = 2 )
x5 <- rnorm( length(x0), mean = 0, sd = 2 )
X <- cbind( x0, x1, x2, x3, x4, x5 )
C <- solve( t(X) %*% X )
y <- rep( 0, length(x0) )
sim.data <- data.frame( 'y' = y, 'x1' = x1, 'x2' = x2, 'x3' = x3, 'x4' = x4, 'x5' = x5 )
c.diag <- sum( diag(C) )
sim.data[ 5, ]
beta_hat_1  <- rep( 0, 2500 )
beta_3_pval <- rep( 0, 2500 )
beta_5_pval <- rep( 0, 2500 )
for ( i in 1:length(beta_hat_1) )
{
epsilon <- rnorm( n, mean = 0, sd = sigma )
sim.data$y     <- beta.0 + ( beta.1 * x1 ) + ( beta.2 * x2 ) +
( beta.3 * x3 ) + ( beta.4 * x4 ) + ( beta.5 * x5 ) + epsilon
fit            <- lm( y  ~ x1 + x2 + x3 + x4 + x5, data = sim.data )
beta_hat_1[i]  <- coef(fit)['x1']
beta_3_pval[i] <- 2 * summary(fit)$coefficients[ 4, "Pr(>|t|)" ]
beta_5_pval[i] <- 2 * summary(fit)$coefficients[ 6, "Pr(>|t|)" ]
}
hist( beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
curve( dnorm( x, mean = beta.1, sd = sqrt( sigma.sqr * C[ 2, 2 ] ) ),
col = "darkorange", add = TRUE, lwd = 3 )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
summary( sim.data$x1 )
hist(sim.data$x1)
summary( sim.data$x1 )
hist( sim.data$x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
x1 <- rnorm( 100, mean = 0, sd = 2 )
hist( sim.data$x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
hist( x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
x1 <- rnorm( 1000, mean = 0, sd = 2 )
hist( x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
x1 <- rnorm( 10000, mean = 0, sd = 2 )
hist( x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
hist( sim.data$x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
x1 <- rnorm( length(x0), mean = 0, sd = 2 )
summary(mlr.nutrition)['sigma']
anova( model.1, model.2 )$'Pr(>F)'[2]`
anova( model.1, model.2 )['Pr(>F)'][2]
)
)
scdcs
cs d, ldm 'l'
anova( model.1, model.2 )['Pr(>F)'][2]
goalies.anova['F'][2]
goalies.anova[,'F'][2]
goalies.anova[ , 'Pr(>F)'][2]
kable( RMSE.data, digits = 6, align = 'r',
col.names = c( 'Train RMSE', 'Test RMSE' ) )
var( beta_hat_1 )
sigma.sqr * C[ 2, 2 ]
beta_hat_1
dim(beta_hat_1)
length(beta_hat_1)
var( beta_hat_1 )
sigma.sqr <- 25
sqrt( sigma.sqr * C[ 2, 2 ] )
sigma.sqr * C[ 2, 2 ]
C <- solve( t(X) %*% X )
sigma.sqr * C[ 2, 2 ]
var( beta_hat_1 )
hist( beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
curve( dnorm( x, mean = beta.1, sd = sqrt( sigma.sqr * C[ 2, 2 ] ) ),
col = "darkorange", add = TRUE, lwd = 3 )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
summary( sim.data$x1 )
hist( sim.data$x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
var(sim.data$x1)
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
std.dev <- sqrt( sigma.sqr * C[ 2, 2 ] ) )
std.dev <- sqrt( sigma.sqr * C[ 2, 2 ] )
mean(beta.1 - 1 * std.dev < beta_hat_1 & beta_hat_1 < beta.1 + 1 * std.dev)
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
length( beta_3_pval[ beta_3_pval < .001 ] ) / length( beta_3_pval )
summary(mlr.nutrition)
summary(mlr.nutrition)$fstatistic
summary(mlr.nutrition)$fstatistic[1]
t.stat <- summary(mlr.nutrition)$fstatistic[1]
anova( model.1, model.2 )[ , 'Pr(>F)'][2]
runif(15)
x0 = rep(15, 0)
x0
rep(0, 15)
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15)
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
C <- solve( t(X) %*% X )
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15)
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
C <- solve( t(X) %*% X )
C
C <- diag( solve( t(X) %*% X ) )
C
C <- sqrt( diag( solve( t(X) %*% X ) ) )
C
sqrt(1.1268838)
rep(1, 15)
set.seed(42)
X = data.frame(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
)
C <- sqrt( diag( solve( t(X) %*% X ) ) )
set.seed(42)
X = as.matrix(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
)
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
C <- sqrt( diag( solve( t(X) %*% X ) ) )
C[3]
C
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
C <- diag( solve( t(X) %*% X ) )
C[3]
sqrt(0.6800694)
dim()X
dim(X)
X[,3]
head(X)
set.seed(42)
X = as.matrix( data.frame(
x0 = rep(1, 15),
x1 = runif(15),
x2 = runif(15),
x3 = runif(15)
) )
C <- diag( solve( t(X) %*% X ) )
C[3]
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp(mlr.nutrition)
p.value <- 2 * pt( -abs(t.stat), df = nrow(nutrition) - 4)
summary(mlr.nutrition)['fstatistic[1]']
summary(mlr.nutrition)[,'fstatistic[1]']
summary(mlr.nutrition)['fstatistic'][1]
summary(mlr.nutrition)['fstatistic']
summary(mlr.nutrition)['fstatistic'][1]
summary(mlr.nutrition)['fstatistic'][,1]
as.vector( summary(mlr.ozone)['coefficients'][ , "Estimate"] )
as.vector( summary(mlr.ozone)['Coefficients'][ , "Estimate"] )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
C         <- solve( t(X) %*% X )
beta.se   <- diag( c( sqrt( sigma.sqr ) ) * sqrt( abs(C) ) )
beta.se
summary(mlr.ozone)$sigma
C
sigma.sqr
sqrt(sigma.sqr)
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
ncol(Ozone)
y.hat     <- X %*% beta.hat.no.lm
e         <- ( y - y.hat ) ^ 2
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
sqrt(sigma.sqr)
e         <- sum( y - y.hat ^ 2 ) / ( nrow(Ozone) - 5 )
e
sqrt(e)
sqrt(abs(e))
beta.se
summary(mlr.ozone)
sigma.sqr
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
C         <- solve( t(X) %*% X )
beta.se   <- diag( c( sqrt( sigma.sqr ) ) * sqrt( abs(C) ) )
sigma.sqr
sqrt(sigma.sqr)
coef(mlr.ozone)
sqrt(coef(mlr.ozone)[1]  )
sqrt(abs(coef(mlr.ozone)[1]  ))
y  <- Ozone$ozone
x0 <- rep( 1, nrow(Ozone) )
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
sigma.sqr
sqrt(sigma.sqr)
summary(mlr.ozone)
summary(mlr.ozone)$sigma
sigma.sqr
sqrt( sigma.sqr )
beta.hat.no.lm
y  <- Ozone$ozone
y  <- Ozone$ozone
x0 <- rep( 1, nrow(Ozone) )
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x0, x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 5 )
sigma.sqr
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
y  <- Ozone$ozone
x1 <- Ozone$wind
x2 <- Ozone$humidity
x3 <- Ozone$temp
X  <- cbind( rep( 1, nrow(Ozone) ), x1, x2, x3 )
beta.hat.no.lm <- as.vector( solve( t(X) %*% X ) %*% t(X) %*% y )
beta.hat.no.lm
y.hat     <- X %*% beta.hat.no.lm
e         <- y - y.hat
sigma.sqr <- ( t(e) %*% e ) / ( nrow(Ozone) - 4 )
check.value <- summary(mlr.ozone)$sigma
sigma.sqr
sqrt( sigma.sqr )
all.equal( sigma.sqr, check.value )
sigma.sqr
all.equal( sqrt( sigma.sqr ), check.value )
sqrt( sigma.sqr )
check.value
y.hat      <- X %*% beta.hat.no.lm
e          <- y - y.hat
sigma.sqr  <- ( t(e) %*% e ) / ( nrow(Ozone) - 4 )
sigma.eval <- sqrt( sigma.sqr )
sigma.chk  <- summary(mlr.ozone)$sigma
sigma.eval
sigma.chk
all.equal( sigma.eval, sigma.chk )
all.equal( unlist(sigma.eval), sigma.chk )
sigma.eval <- sqrt( sigma.sqr )[1]
sigma.eval
sigma.chk
all.equal( sigma.eval, sigma.chk )
SSreg          <- sum( ( y.hat - mean(y) ) ^ 2 )
SStotal        <- sum( ( y     - mean(y) ) ^ 2 )
r.square.no.lm <- ( SSreg / SStotal )
r.square.lm    <- summary(mlr.ozone)$r.square
all.equal( r.square.no.lm, r.square.lm )
r.square.no.lm
SSreg          <- sum( ( y.hat - mean(y) ) ^ 2 )
SStotal        <- sum( ( y     - mean(y) ) ^ 2 )
r.square.no.lm <- ( SSreg / SStotal )
r.square.lm    <- summary(mlr.ozone)$r.square
r.square.no.lm
r.square.lm
all.equal( r.square.no.lm, r.square.lm )
set.seed(1)
auto_trn_idx <- sample(1:nrow(Auto), 292)
auto.trn     <- Auto[  auto_trn_idx, ]
auto.tst     <- Auto[ -auto_trn_idx, ]
auto.model.1 <- lm( mpg ~ ., data = auto.trn )
auto.model.2 <- lm( mpg ~ displacement, data = auto.trn )
auto.model.3 <- lm( mpg ~ horsepower + cylinders, data = auto.trn )
auto.model.4 <- lm( mpg ~ cylinders + displacement + weight, data = auto.trn )
auto.model.5 <- lm( mpg ~ weight + cylinders + year, data = auto.trn )
find.RMSE <- function( train, test, model )
{
# Find RMSE for first train model
y          <- train$mpg
y.hat      <- predict( model, train[2:8] )
RMSE.train <- sqrt( ( 1 / nrow(train) ) * sum( ( y - y.hat ) ^ 2 ) )
# Find RMSE for first test model
y         <- test$mpg
y.hat     <- predict( model, test[2:8] )
RMSE.test <- sqrt( ( 1 / nrow(test) ) * sum( ( y - y.hat ) ^ 2 ) )
return( c( RMSE.train, RMSE.test ) )
}
row1 <- find.RMSE( auto.trn, auto.tst, auto.model.1 )
row2 <- find.RMSE( auto.trn, auto.tst, auto.model.2 )
row3 <- find.RMSE( auto.trn, auto.tst, auto.model.3 )
row4 <- find.RMSE( auto.trn, auto.tst, auto.model.4 )
row5 <- find.RMSE( auto.trn, auto.tst, auto.model.5 )
RMSE.data <- as.data.frame( rbind( row1, row2, row3, row4, row5 ) )
rownames(RMSE.data) <- c( 'Model 1', 'Model 2', 'Model 3', 'Model 4', 'Model 5' )
library(knitr)
kable( RMSE.data, digits = 6, align = 'r',
col.names = c( 'Train RMSE', 'Test RMSE' ) )
set.seed(420)
n         <- 42
beta.0    <- 2
beta.1    <- -.75
beta.2    <- 1.5
beta.3    <- 0
beta.4    <- 0
beta.5    <- 2
sigma.sqr <- 25
sigma     <- 5
x1 <- rnorm( length(x0), mean = 0, sd = 2 )
x2 <- runif( length(x0), min = 0, max = 4 )
x3 <- rnorm( length(x0), mean = 0, sd = 1 )
x4 <- runif( length(x0), min = -2, max = 2 )
x5 <- rnorm( length(x0), mean = 0, sd = 2 )
X <- cbind( x0, x1, x2, x3, x4, x5 )
C <- solve( t(X) %*% X )
y <- rep( 0, length(x0) )
sim.data <- data.frame( 'y' = y, 'x1' = x1, 'x2' = x2, 'x3' = x3, 'x4' = x4, 'x5' = x5 )
beta_hat_1  <- rep( 0, 2500 )
beta_3_pval <- rep( 0, 2500 )
beta_5_pval <- rep( 0, 2500 )
for ( i in 1:length(beta_hat_1) )
{
epsilon <- rnorm( n, mean = 0, sd = sigma )
sim.data$y     <- beta.0 + ( beta.1 * x1 ) + ( beta.2 * x2 ) +
( beta.3 * x3 ) + ( beta.4 * x4 ) + ( beta.5 * x5 ) + epsilon
fit            <- lm( y  ~ x1 + x2 + x3 + x4 + x5, data = sim.data )
beta_hat_1[i]  <- coef(fit)['x1']
beta_3_pval[i] <- 2 * summary(fit)$coefficients[ 4, "Pr(>|t|)" ]
beta_5_pval[i] <- 2 * summary(fit)$coefficients[ 6, "Pr(>|t|)" ]
}
warnings()
set.seed(420)
n         <- 42
beta.0    <- 2
beta.1    <- -.75
beta.2    <- 1.5
beta.3    <- 0
beta.4    <- 0
beta.5    <- 2
sigma.sqr <- 25
sigma     <- 5
x0 <- rep( 1, length = n )
x1 <- rnorm( length(x0), mean = 0, sd = 2 )
x2 <- runif( length(x0), min = 0, max = 4 )
x3 <- rnorm( length(x0), mean = 0, sd = 1 )
x4 <- runif( length(x0), min = -2, max = 2 )
x5 <- rnorm( length(x0), mean = 0, sd = 2 )
X <- cbind( x0, x1, x2, x3, x4, x5 )
C <- solve( t(X) %*% X )
y <- rep( 0, length(x0) )
sim.data <- data.frame( 'y' = y, 'x1' = x1, 'x2' = x2, 'x3' = x3, 'x4' = x4, 'x5' = x5 )
beta_hat_1  <- rep( 0, 2500 )
beta_3_pval <- rep( 0, 2500 )
beta_5_pval <- rep( 0, 2500 )
for ( i in 1:length(beta_hat_1) )
{
epsilon <- rnorm( n, mean = 0, sd = sigma )
sim.data$y     <- beta.0 + ( beta.1 * x1 ) + ( beta.2 * x2 ) +
( beta.3 * x3 ) + ( beta.4 * x4 ) + ( beta.5 * x5 ) + epsilon
fit            <- lm( y  ~ x1 + x2 + x3 + x4 + x5, data = sim.data )
beta_hat_1[i]  <- coef(fit)['x1']
beta_3_pval[i] <- 2 * summary(fit)$coefficients[ 4, "Pr(>|t|)" ]
beta_5_pval[i] <- 2 * summary(fit)$coefficients[ 6, "Pr(>|t|)" ]
}
summary( sim.data$x1 )
hist( sim.data$x1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
mean( beta_hat_1 )
var( beta_hat_1 )
mean( x1 )
var( x1 )
C
sqrt(0.0075684072)
hist( beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression( hat(beta)[1] ), main = "", border = "dodgerblue" )
curve( dnorm( x, mean = beta.1, sd = sqrt( sigma.sqr * C[ 2, 2 ] ) ),
col = "darkorange", add = TRUE, lwd = 3 )
length( beta_3_pval[ beta_3_pval < .1 ] ) / length( beta_3_pval )
length( beta_5_pval[ beta_5_pval < .01 ] ) / length( beta_5_pval )
