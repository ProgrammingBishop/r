xlab = "Predictor",
ylab = "Response",
col  = "red" )
abline( slr.lm, col = 'blue' )
abline ( beta_0, beta_1, lwd = 3, lty = 2, col = 'orange' )
x = runif( n = 25, 0, 10 )
x = runif( n = 25, 0, 10 )
x
x = runif( n = 25, 0, 10 )
x
beta_1_hat_iter <- vector( mode = 'numeric', 1500 )
beta_1_hat_iter
coef(slr.model)
coef(slr.model[1])
coef(slr.model[2])
slr.model
coef(slr.lm[1])
coef(slr.lm)
coef(slr.lm[2])
coef(slr.lm)[1]
coef(lm.iter)[2]
coef(slr.lm)[2]
coef(slr.lm)[1]
coef(slr.lm)[2]
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
y                  <- beta_0 + ( beta_1 * x.iter )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, sigma = 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
View( as.data.frame( beta_1_hat_iter ) )
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
slr.lm$coefficients
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
x = runif( n = 25, 0, 10 )
sim.slr <- function( x, beta_0, beta_1, sigma )
{
n = length(x)
epsilon = rnorm( n, mean = 0, sd = sigma )
y = beta_0 + ( beta_1 * x ) + epsilon
data.frame( predictor = x, response = y )
}
slr.model <- sim.slr( x, beta_0 = 5, beta_1 = -3, sigma = 3.2 )
slr.model
slr.lm <- lm( slr.model$response ~ slr.model$predictor )
slr.lm
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
slr.lm$coefficients
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[1]
}
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
coef(slr.lm)
coef(slr.lm)[2]
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
hist( beta_hat_1 )
hist( beta_hat_1_iter )
beta_1_hat_iter <- vector( mode = 'numeric', 1500 )
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter )
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
hist( beta_1_hat_iter )
hist( beta_1_hat_iter,
col = 'green' )
hist( beta_1_hat_iter,
col = 'orange' )
hist( beta_1_hat_iter,
col = 'orange',
main = '$\beta$' )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency' )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, 2 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency' )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ) )
beta_0 <- 3
beta_1 <- 0
slr.sd <- 2
beta_1_hat_iter <- vector( mode = 'numeric', 2500 )
for ( i in 1:2500 )
{
x.iter             <- runif(n = 75, 0, 10)
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
beta_1_hat_iter <- vector( mode = 'numeric', 2500 )
for ( i in 1:2500 )
{
x.iter             <- runif(n = 75, 0, 10)
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, slr.sd )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency' )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -3.5, 3.5 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency' )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ) )
beta_1_hat_iter <- vector( mode = 'numeric', 1500 )
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ) )
beta_1_hat_iter <- vector( mode = 'numeric', 1500 )
beta_0 <-  5
beta_1 <- -3
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ),
ylim = c( 0, 550 ) )
beta_0 <-  5
beta_1 <- -3
plot( y = slr.model$response, x = slr.model$predictor,
main = "Simulated Simple Linear Regression",
xlab = "Predictor",
ylab = "Response",
col  = "red" )
abline( slr.lm, col = 'blue' )
abline ( beta_0, beta_1, lwd = 3, lty = 2, col = 'orange' )
beta_1_hat_iter <- vector( mode = 'numeric', 1500 )
for ( i in 1:1500 )
{
x.iter             <- runif( n = 25, 0, 10 )
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, 3.2 )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
mean( beta_1_hat_iter )
sd( beta_1_hat_iter )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ),
ylim = c( 0, 550 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ),
ylim = c( 0, 400 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -4, -2 ),
ylim = c( 0, 300 ) )
birthday = 19920917
set.seed(birthday)
beta_0 <- 3
beta_1 <- 0
slr.sd <- 2
beta_1_hat_iter <- vector( mode = 'numeric', 2500 )
for ( i in 1:2500 )
{
x.iter             <- runif(n = 75, 0, 10)
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, slr.sd )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
df <- as.data.frame( read.csv('skeptic.csv') )
df <- as.data.frame( read.csv('./skeptic.csv') )
setwd( '/Users/Sbishop/Downloads/w02-hw-sbishop3' )
df <- as.data.frame( read.csv('./skeptic.csv') )
head(df)
df.lm <- lm( response ~ predictor, data = df )
df.lm$coefficients[2]
df.lm$coefficients[1]
df.lm$coefficients[2]
slope <- df.lm$coefficients[2]
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
abline( v = slope, col = "red" )
df    <- as.data.frame( read.csv('./skeptic.csv') )
df.lm <- lm( response ~ predictor, data = df )
slope <- df.lm$coefficients[2]
slope
pnorm( slope, mean = 0, sd = .3 )
mean( beta_1_hat_iter < slope )
beta_1_hat_iter
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
beta_1_hat_iter[ beta_1_hat_iter < slope, ]
beta_1_hat_iter[ beta_1_hat_iter < slope ]
slope
df.lm$coefficients
abline( v = slope, col = "red" )
beta_0 <- 3
beta_1 <- 0
slr.sd <- 2
beta_1_hat_iter <- vector( mode = 'numeric', 2500 )
for ( i in 1:2500 )
{
x.iter             <- runif(n = 75, 0, 10)
slr.iter.model     <- sim.slr( x.iter, beta_0, beta_1, slr.sd )
lm.iter            <- lm( slr.iter.model$response ~ slr.iter.model$predictor, data = slr.iter.model )
beta_1_hat_iter[i] <- coef(lm.iter)[2]
}
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
hist( beta_1_hat_iter,
col = 'orange',
main = 'Slope of Multiple Simulations',
xlab = 'Value',
ylab = 'Frequency',
xlim = c( -.35, .35 ) )
df    <- as.data.frame( read.csv('./skeptic.csv') )
df.lm <- lm( response ~ predictor, data = df )
slope <- df.lm$coefficients[2]
abline( v = slope, col = "red" )
beta_1_hat_iter
beta_1_hat_iter[ beta_1_hat_iter < slope ]
beta_1_hat_iter[ beta_1_hat_iter < slope ] / length(beta_1_hat_iter)
beta_1_hat_iter[ beta_1_hat_iter < slope ] / length(beta_1_hat_iter)
length( beta_1_hat_iter[ beta_1_hat_iter < slope ] ) / length(beta_1_hat_iter)
prop <- length( beta_1_hat_iter[ beta_1_hat_iter < slope ] ) / length(beta_1_hat_iter)
prop
prop * 2
df
View(df)
View(beta_1_hat_iter)
View( df.lm )
df.lm
View( as.data.frame( beta_1_hat_iter ) )
lm( response ~ predictor, data = df )
mean(beta_1_hat_iter)
prop <- length( beta_1_hat_iter[ beta_1_hat_iter < slope ] ) / length(beta_1_hat_iter)
prop
prop * 2
slope
install.packages('mlbench')
library(mlbench)
data( Ozone )
head(Ozone)
?Ozone()
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
head(Ozone)
lm( ozone ~ wind speed + humidity percentage + temperature, data = Ozone )
lm( ozone ~ wind + humidity + temp, data = Ozone )
wind     <- lm( ozone ~ wind,     data = Ozone )
humidity <- lm( ozone ~ humidity, data = Ozone )
temp     <- lm( ozone ~ temp,     data = Ozone )
install.packages('knitr')
install.packages("knitr")
?kable()
get.rmse <- function( actual, fitted )
{
sqrt(
sum( actual - fitted ) / length( fitted )
)
}
RMSE.wind     <- get.rmse( Ozone$wind,     wind$fitted.values )
get.rmse <- function( actual, fitted )
{
sqrt(
sum( (actual - fitted) ^ 2 ) / length(fitted)
)
}
RMSE.wind     <- get.rmse( Ozone$wind,     wind$fitted.values )
RMSE.humidity <- get.rmse( Ozone$humidity, humidity$fitted.values )
RMSE.temp     <- get.rmse( Ozone$temp,     temp$fitted.values )
RMSE.wind
RMSE.humidity
RMSE.temp
get.r.square <- function( beta_0, beta_1, data )
{
y_hat    = beta_hat_0 + ( beta_hat_1 * cats$Bwt )
SST      = sum( ( cats$Hwt - mean( cats$Hwt ) ) ^ 2 )
SSReg    = sum( ( y_hat    - mean( cats$Hwt ) ) ^ 2 )
R.square = SSReg / SST
}
r.square.wind <- get.r.square( wind$coefficients[1], wind$coefficients[2], wind )
r.square.wind
r.square.humidity <- get.r.square( humidity$coefficients[1], humidity$coefficients[2], humidity )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     temp )
r.square.humidity
r.square.temp
get.r.square <- function( beta_0, beta_1, data )
{
y_hat    = beta_hat_0 + ( beta_hat_1 * cats$Bwt )
SST      = sum( ( cats$Hwt - mean( cats$Hwt ) ) ^ 2 )
SSReg    = sum( ( y_hat    - mean( cats$Hwt ) ) ^ 2 )
R.square = SSReg / SST
return ( R.square )
}
wind     <- lm( ozone ~ wind,     data = Ozone )
humidity <- lm( ozone ~ humidity, data = Ozone )
temp     <- lm( ozone ~ temp,     data = Ozone )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     temp )
r.square.temp
r.square.wind     <- get.r.square( wind$coefficients[1],     wind$coefficients[2],     Ozone$wind )
r.square.humidity <- get.r.square( humidity$coefficients[1], humidity$coefficients[2], Ozone$humidity )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     Ozone$temp )
r.square.wind
r.square.temp
get.r.square <- function( beta_0, beta_1, data )
{
y_hat    = beta_0 + ( beta_1 * data )
SST      = sum( ( data  - mean( data ) ) ^ 2 )
SSReg    = sum( ( y_hat - mean( data ) ) ^ 2 )
R.square = SSReg / SST
return ( R.square )
}
r.square.wind     <- get.r.square( wind$coefficients[1],     wind$coefficients[2],     Ozone$wind )
r.square.humidity <- get.r.square( humidity$coefficients[1], humidity$coefficients[2], Ozone$humidity )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     Ozone$temp )
r.square.wind
r.square.humidity
r.square.temp
wind$coefficients[1]
wind$coefficients[2]
get.r.square <- function( beta_0, beta_1, x, y )
{
y_hat    = beta_0 + ( beta_1 * x )
SST      = sum( ( y  - mean( y ) ) ^ 2 )
SSReg    = sum( ( y_hat - mean( y ) ) ^ 2 )
R.square = SSReg / SST
return ( R.square )
}
r.square.wind     <- get.r.square( wind$coefficients[1],     wind$coefficients[2],     Ozone$wind ,Ozone$ozone )
r.square.humidity <- get.r.square( humidity$coefficients[1], humidity$coefficients[2], Ozone$humidity ,Ozone$ozone )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     Ozone$temp ,Ozone$ozone )
r.square.wind
r.square.temp
r.square.humidity
summary(wind)
summary(wind)
RMSE.wind
summary(temp)
wind$fitted.values
Ozone$wind
length(humidity$fitted.values)
sum( (Ozone$humidity - humidity$fitted.values) ^ 2 )
View(Ozone)
sum( (Ozone$humidity - humidity$fitted.values) ^ 2 ) / length(humidity$fitted.values)
sqrt( sum( (Ozone$humidity - humidity$fitted.values) ^ 2 ) / length(humidity$fitted.values) )
Ozone$wind
Ozone$humidity
humidity$fitted.values
wind     <- lm( Ozone$ozone ~ Ozone$wind,     data = Ozone )
humidity <- lm( Ozone$ozone ~ Ozone$humidity, data = Ozone )
temp     <- lm( Ozone$ozone ~ Ozone$temp,     data = Ozone )
get.r.square <- function( beta_0, beta_1, x, y )
{
y_hat    = beta_0 + ( beta_1 * x )
SST      = sum( ( y  - mean( y ) ) ^ 2 )
SSReg    = sum( ( y_hat - mean( y ) ) ^ 2 )
R.square = SSReg / SST
return ( R.square )
}
r.square.wind     <- get.r.square( wind$coefficients[1],     wind$coefficients[2],     Ozone$wind ,Ozone$ozone )
r.square.humidity <- get.r.square( humidity$coefficients[1], humidity$coefficients[2], Ozone$humidity ,Ozone$ozone )
r.square.temp     <- get.r.square( temp$coefficients[1],     temp$coefficients[2],     Ozone$temp ,Ozone$ozone )
r.square.wind
get.rmse <- function( actual, fitted )
{
sqrt(
sum( (actual - fitted) ^ 2 ) / length(fitted)
)
}
RMSE.wind     <- get.rmse( Ozone$wind,     wind$fitted.values )
RMSE.wind
Ozone$humidity
Ozone$temp
temp$fitted.values
?data.frame()
df <- data.frame( 'R Square' = c( r.square.wind, r.square.humidity, r.square.temp ),
'RMSE'     = c( RMSE.wind,     RMSE.humidity,     RMSE.temp ),
row.names  = c( wind,          humidity,          temp ) )
df <- data.frame( 'R Square' = c( r.square.wind, r.square.humidity, r.square.temp ),
'RMSE'     = c( RMSE.wind,     RMSE.humidity,     RMSE.temp ) )
df
df <- data.frame( 'R Square' = c( r.square.wind, r.square.humidity, r.square.temp ),
'RMSE'     = c( RMSE.wind,     RMSE.humidity,     RMSE.temp ),
row.names  = c( 'wind',        'humidity',        'temp' ) )
df
?kable()
kable( df, digits = 10 )
install.packages('knitr')
library(knitr)
kable( df )
kable(df)
kable()
library(knitr)
install.packages('knitr')
library(knitr)
